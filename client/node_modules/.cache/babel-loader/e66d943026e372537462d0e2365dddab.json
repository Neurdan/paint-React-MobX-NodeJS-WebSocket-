{"ast":null,"code":"import Tool from \"./Tool\";\nexport default class Rect extends Tool {\n  constructor(canvas, socket, id) {\n    super(canvas, socket, id);\n    this.listen();\n  }\n\n  listen() {\n    this.canvas.onmousemove = this.mouseMoveHandler.bind(this);\n    this.canvas.onmousedown = this.mouseDownHandler.bind(this);\n    this.canvas.onmouseup = this.mouseUpHandler.bind(this);\n  }\n\n  mouseUpHandler(e) {\n    this.mouseDown = false;\n    this.socket.send(JSON.stringify({\n      method: \"draw\",\n      id: this.id,\n      figure: {\n        type: 'rect',\n        x: e.pageX - e.target.offsetLeft,\n        y: e.pageY - e.target.offsetTop\n      }\n    }));\n  }\n\n  mouseDownHandler(e) {\n    this.mouseDown = true;\n    this.ctx.beginPath();\n    this.startX = e.pageX - e.target.offsetLeft;\n    this.startY = e.pageY - e.target.offsetTop;\n    this.saved = this.canvas.toDataURL();\n  }\n\n  mouseMoveHandler(e) {\n    if (this.mouseDown) {\n      let currentX = e.pageX - e.target.offsetLeft;\n      let currentY = e.pageY - e.target.offsetTop;\n      let width = currentX - this.startX;\n      let height = currentY - this.startY;\n      this.draw(this.startX, this.startY, width, height);\n    }\n  }\n\n  draw(x, y, w, h) {\n    const img = new Image();\n    img.src = this.saved;\n\n    img.onload = async () => {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n      this.ctx.beginPath();\n      this.ctx.rect(x, y, w, h);\n      this.ctx.fill();\n      this.ctx.stroke();\n    };\n  }\n\n}","map":{"version":3,"names":["Tool","Rect","constructor","canvas","socket","id","listen","onmousemove","mouseMoveHandler","bind","onmousedown","mouseDownHandler","onmouseup","mouseUpHandler","e","mouseDown","send","JSON","stringify","method","figure","type","x","pageX","target","offsetLeft","y","pageY","offsetTop","ctx","beginPath","startX","startY","saved","toDataURL","currentX","currentY","width","height","draw","w","h","img","Image","src","onload","clearRect","drawImage","rect","fill","stroke"],"sources":["/Users/mykola/Desktop/Projects/PetProject2/my-app/client/src/tools/Rect.js"],"sourcesContent":["import Tool from \"./Tool\";\n\nexport default class Rect extends Tool {\n    constructor(canvas, socket, id) {\n        super(canvas, socket, id);\n        this.listen()\n    }\n\n    listen() {\n        this.canvas.onmousemove = this.mouseMoveHandler.bind(this)\n        this.canvas.onmousedown = this.mouseDownHandler.bind(this)\n        this.canvas.onmouseup = this.mouseUpHandler.bind(this)\n    }\n\n    mouseUpHandler(e) {\n        this.mouseDown = false\n        this.socket.send(JSON.stringify({\n            method: \"draw\",\n            id: this.id,\n            figure: {\n                type: 'rect',\n                x: e.pageX - e.target.offsetLeft,\n                y: e.pageY - e.target.offsetTop,\n            }\n        }))\n    }\n\n    mouseDownHandler(e) {\n        this.mouseDown = true\n        this.ctx.beginPath()\n        this.startX = e.pageX - e.target.offsetLeft;\n        this.startY = e.pageY - e.target.offsetTop;\n\n        this.saved = this.canvas.toDataURL()\n    }\n\n    mouseMoveHandler(e) {\n        if (this.mouseDown) {\n            let currentX = e.pageX - e.target.offsetLeft;\n            let currentY = e.pageY - e.target.offsetTop;\n            let width = currentX - this.startX;\n            let height = currentY - this.startY;\n            this.draw(this.startX, this.startY, width, height)\n        }\n    }\n\n    draw(x, y, w, h) {\n        const img = new Image()\n        img.src = this.saved\n        img.onload = async () => {\n            this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n            this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n            this.ctx.beginPath()\n            this.ctx.rect(x, y, w, h)\n            this.ctx.fill()\n            this.ctx.stroke()\n        }\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}