{"ast":null,"code":"var _jsxFileName = \"/Users/mykola/Desktop/Projects/PetProject2/my-app/client/src/components/Canvas.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from \"react\";\nimport \"../styles/canvas.scss\";\nimport { observer } from \"mobx-react-lite\";\nimport canvasState from \"../store/canvasState\";\nimport toolState from \"../store/toolState\";\nimport Brush from \"../tools/Brush\";\nimport { Button, Modal } from \"react-bootstrap\";\nimport { useParams } from \"react-router-dom\";\nimport Rect from \"../tools/Rect\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Canvas = _s(observer(_c = _s(() => {\n  _s();\n\n  const canvasRef = useRef();\n  const usernameRef = useRef();\n  const [modal, setModal] = useState(true);\n  const params = useParams();\n  useEffect(() => {\n    canvasState.setCanvas(canvasRef.current);\n    axios.get(`http://localhost:5555/image?id=${params.id}`).then(response => {\n      const img = new Image();\n      img.src = response;\n\n      img.onload = async () => {\n        this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height);\n        this.ctx.beginPath();\n        this.ctx.rect(x, y, w, h);\n        this.ctx.fill();\n        this.ctx.stroke();\n      };\n    });\n  }, []);\n  useEffect(() => {\n    if (canvasState.username) {\n      const socket = new WebSocket(`ws://localhost:5555/`);\n      canvasState.setSocket(socket);\n      canvasState.setSessionId(params.id);\n      toolState.setTool(new Brush(canvasRef.current), socket, params.id);\n\n      socket.onopen = () => {\n        socket.send(JSON.stringify({\n          id: params.id,\n          username: canvasState.username,\n          method: \"connection\"\n        }));\n      };\n\n      socket.onmessage = event => {\n        let msg = JSON.parse(event.data);\n\n        switch (msg.method) {\n          case \"connection\":\n            console.log(`User ${msg.username} was connected`);\n            break;\n\n          case \"draw\":\n            drawHandler(msg);\n            break;\n        }\n      };\n    }\n  }, [canvasState.username]);\n\n  const mouseDownHandler = () => {\n    canvasState.pushToUndo(canvasRef.current.toDataURL());\n    axios.post(`http://localhost:5555/image?id=${params.id}`, {\n      img: canvasRef.current.toDataURL()\n    }).then(response => console.log(response.data));\n  };\n\n  const connectHandler = () => {\n    canvasState.setUsername(usernameRef.current.value);\n    setModal(false);\n  };\n\n  const drawHandler = msg => {\n    const figure = msg.figure;\n    const ctx = canvasRef.current.getContext('2d');\n\n    switch (figure.type) {\n      case \"brush\":\n        Brush.draw(ctx, figure.x, figure.y);\n        break;\n\n      case \"rect\":\n        Rect.staticDraw(ctx, figure.x, figure.y, figure.width, figure.height, figure.color);\n        break;\n\n      case \"finish\":\n        ctx.beginPath();\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"canvas\",\n    children: [/*#__PURE__*/_jsxDEV(Modal, {\n      show: modal,\n      onHide: () => {},\n      children: [/*#__PURE__*/_jsxDEV(Modal.Header, {\n        closeButton: true,\n        children: /*#__PURE__*/_jsxDEV(Modal.Title, {\n          children: \"Enter your nickname\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Body, {\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          ref: usernameRef,\n          type: \"text\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Modal.Footer, {\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"secondary\",\n          onClick: () => connectHandler(),\n          children: \"Enter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      onMouseDown: () => mouseDownHandler(),\n      ref: canvasRef,\n      width: 600,\n      height: 400\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}, \"frpiFXrwApBwe8aIG91Eg0cuJTQ=\", false, function () {\n  return [useParams];\n})), \"frpiFXrwApBwe8aIG91Eg0cuJTQ=\", false, function () {\n  return [useParams];\n});\n\n_c2 = Canvas;\nexport default Canvas;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Canvas$observer\");\n$RefreshReg$(_c2, \"Canvas\");","map":{"version":3,"names":["React","useEffect","useRef","useState","observer","canvasState","toolState","Brush","Button","Modal","useParams","Rect","axios","Canvas","canvasRef","usernameRef","modal","setModal","params","setCanvas","current","get","id","then","response","img","Image","src","onload","ctx","clearRect","canvas","width","height","drawImage","beginPath","rect","x","y","w","h","fill","stroke","username","socket","WebSocket","setSocket","setSessionId","setTool","onopen","send","JSON","stringify","method","onmessage","event","msg","parse","data","console","log","drawHandler","mouseDownHandler","pushToUndo","toDataURL","post","connectHandler","setUsername","value","figure","getContext","type","draw","staticDraw","color"],"sources":["/Users/mykola/Desktop/Projects/PetProject2/my-app/client/src/components/Canvas.jsx"],"sourcesContent":["import React, {useEffect, useRef, useState} from \"react\";\nimport \"../styles/canvas.scss\"\nimport {observer} from \"mobx-react-lite\";\nimport canvasState from \"../store/canvasState\";\nimport toolState from \"../store/toolState\";\nimport Brush from \"../tools/Brush\";\nimport {Button, Modal} from \"react-bootstrap\";\nimport {useParams} from \"react-router-dom\";\nimport Rect from \"../tools/Rect\";\nimport axios from \"axios\";\n\nconst Canvas = observer(() => {\n    const canvasRef = useRef()\n    const usernameRef = useRef()\n\n    const [modal, setModal] = useState(true)\n    const params = useParams()\n    useEffect(() => {\n        canvasState.setCanvas(canvasRef.current);\n        axios.get(`http://localhost:5555/image?id=${params.id}`)\n            .then(response => {\n                const img = new Image()\n                img.src = response\n                img.onload = async () => {\n                    this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height)\n                    this.ctx.drawImage(img, 0, 0, this.canvas.width, this.canvas.height)\n                    this.ctx.beginPath()\n                    this.ctx.rect(x, y, w, h)\n                    this.ctx.fill()\n                    this.ctx.stroke()\n                }\n            })\n    }, [])\n\n    useEffect(() => {\n        if (canvasState.username) {\n            const socket = new WebSocket(`ws://localhost:5555/`)\n            canvasState.setSocket(socket)\n            canvasState.setSessionId(params.id)\n            toolState.setTool(new Brush(canvasRef.current), socket, params.id)\n\n            socket.onopen = () => {\n                socket.send(JSON.stringify({\n                    id: params.id,\n                    username: canvasState.username,\n                    method: \"connection\"\n                }))\n            }\n            socket.onmessage = (event) => {\n                let msg = JSON.parse(event.data)\n                switch (msg.method) {\n                    case \"connection\" :\n                        console.log(`User ${msg.username} was connected`)\n                        break\n                    case \"draw\":\n                        drawHandler(msg)\n                        break\n                }\n            }\n        }\n    }, [canvasState.username])\n    const mouseDownHandler = () => {\n        canvasState.pushToUndo(canvasRef.current.toDataURL())\n        axios.post(`http://localhost:5555/image?id=${params.id}`, {img: canvasRef.current.toDataURL()})\n            .then(response => console.log(response.data))\n    }\n\n    const connectHandler = () => {\n        canvasState.setUsername(usernameRef.current.value)\n        setModal(false)\n    }\n\n    const drawHandler = (msg) => {\n        const figure = msg.figure\n        const ctx = canvasRef.current.getContext('2d')\n        switch (figure.type) {\n            case \"brush\":\n                Brush.draw(ctx, figure.x, figure.y)\n                break\n            case \"rect\":\n                Rect.staticDraw(ctx, figure.x, figure.y, figure.width, figure.height, figure.color)\n                break\n            case \"finish\":\n                ctx.beginPath()\n                break\n        }\n    }\n\n    return (\n        <div className=\"canvas\">\n            <Modal show={modal} onHide={() => {\n            }}>\n                <Modal.Header closeButton>\n                    <Modal.Title>Enter your nickname</Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <input ref={usernameRef} type=\"text\"/>\n                </Modal.Body>\n                <Modal.Footer>\n                    <Button variant=\"secondary\" onClick={() => connectHandler()}>\n                        Enter\n                    </Button>\n                </Modal.Footer>\n            </Modal>\n            <canvas onMouseDown={() => mouseDownHandler()} ref={canvasRef} width={600} height={400}/>\n        </div>\n    )\n});\n\nexport default Canvas;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}